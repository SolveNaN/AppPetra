@page "/singlepozo"
@page "/singlepozo/{id:int}"
@using ControWell.Client.Services.PozoService;
@inject IPozoService PozoService
@inject HttpClient Http
@inject NavigationManager NanigationManager

<h3>CrearPozo</h3>

<EditForm Model="pozo" OnSubmit="EnviarVariable">
    <div>
        <label for="nombre">Nombre pozo</label>
        <InputText id="nombre" @bind-Value="pozo.NombrePozo" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Unidad de medida</label>
        <InputText id="lastname" @bind-Value="pozo.Operadora" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Unidad de medida</label>
        <InputText id="lastname" @bind-Value="pozo.Ubicacion" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Unidad de medida</label>
        <InputText id="lastname" @bind-Value="pozo.Comentario" class="form-control"></InputText>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="UpdatePozo">Actualizar</button>
    <button type="button" class="btn btn-danger" @onclick="DeletePozo">Eliminar</button>
    <button class="btn btn-outline-warning" @onclick="VolverAnterior">Volver</button>
</EditForm>


@code {
    [Parameter]

    public int? Id { get; set; }

    Pozo pozo = new Pozo();


    async Task EnviarVariable()
    {
        await PozoService.UpdatePozo(pozo);

    }

    void VolverAnterior()
    {
        NanigationManager.NavigateTo("/Pozolist");
    }


    protected override async Task OnParametersSetAsync()
    {

        pozo = await PozoService.GetSinglePozo((int)Id);
    }

    async Task DeletePozo()
    {
        await PozoService.DeletePozo(pozo.Id);
    }

    async Task UpdatePozo()
    {
        await PozoService.UpdatePozo(pozo);
    }


}