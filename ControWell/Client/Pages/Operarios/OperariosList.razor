@page "/operarioslist"
@using ControWell.Client.Services.OperarioService;
@using ControWell.Shared
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IOperarioService OperarioService
@inject SweetAlertService Swal

<div class="table-container-scroll">
<table class="table">
    <thead>
        <tr>
           @* <th>Id</th>*@
            <th>Identificador</th>
            <th>Nombre Operador</th>
            <th>Cedula</th>
            <th>Estado</th>
            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var Operario in Operarios)
        {
            
             <tr>
               <td>@Operario.Id</td>
               @if(update == true && Operario.Id == id){<td><input @bind-value="@Operario.Id" /></td>}else{<td>@Operario.Id</td>}
               @if(update == true && Operario.Id == id){<td><input @bind-value="@Operario.Nombre" /></td>}else{<td>@Operario.Nombre</td>}
               @if(update == true && Operario.Id == id){<td><input @bind-value="@Operario.Cedula" /></td>}else{<td>@Operario.Cedula</td>}
               @if(update == true && Operario.Id == id){<td><input @bind-value="@Operario.Estado" /></td>}else{<td>@Operario.Estado</td>}

                <td>
                  @if(update == true && Operario.Id == id){
                    <button type="submit" class="btn btn-info" data-toggle="tooltip" title="Save" @onclick="(()=>UpdateOperario(Operario))">
                                <i style="position:initial" class="fa-solid fa-circle-check"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="Cancelar" data-toggle="tooltip" title="Cancel">
                                <i style="position:initial" class="fa-solid fa-ban"></i>
                    </button>
                  }else{
                    <button class="btn btn-primary" data-toggle="tooltip" title="Update" @onclick="(()=> updatedatarow(Operario.Id))"><i style="position:initial" class="oi oi-pencil"></i></button>
                            <button class="btn btn-warning" data-toggle="tooltip" title="Delete" @onclick="(()=>  DeleteOperario(Operario.Id))"><i style="position:initial" class="oi oi-trash"></i></button>
                  }
                </td>
               </tr>
                }
    </tbody>
</table>
</div>

@*Loading database*@
@if (OperariosState == false)
{
    <div id="db-spinner">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

@*AGREGAR NUEVO POZO BUTTON*@

@if (state == true || OperariosState == false){
  <button class="btn btn-success" id="btn-nuevo-Operario" @onclick="NevegarVariablesLista" disabled >Nuevo Operario</button>
}else
{
    <button class="btn btn-success" id="btn-nuevo-Operario" @onclick="NevegarVariablesLista">Nuevo Operario</button>
}

<style>

 body{
   font-family: Arial;
  }

  input {
    border-radius: 5px;
    background-color: #f7fafc;
    width: 90%;
    height: 40px;
    border: 0.5px dashed blue;

  }
/* estilos de la tabla */

  .table-container-scroll{
         overflow:scroll;
         height:500px;
         width:100%;
         position: relative;
         margin-top:10px;
         margin-left: 10px;
         margin-bottom:10px;
         border-radius: 5px;

  }

    table{
        background-color: white;
        text-align: left;
        border-collapse: collapse;
        width: 100%;

    }

    th {
        position: relative;
    }

    th, td{
        padding: 10px;
        margin-left: 40px;
    }

    thead{
        background-color: #388e3c;
        border-bottom: solid 3px #0F362D;
        color: #eeeeee;
        position: sticky;
        top: 0px;

    }

    tr:nth-child(even){
        background-color: #ddd;
    }

    tr:hover td{
       background-color: rgba(100, 176, 161, 0.8);
       /*background-color: #369681;*/
       color: #eeeeee;
    }

    #btn-nuevo-Operario{
        margin-top:10px;
        margin-left:10px;
    }

 /* estilos formulario agregar Operario*/
 .create-Operario-container{
       position: absolute;
       top: 55px;
       left: 250px;
       padding: 12px;
       width: 1110px;
       height: 570px;
       display: flex;
       justify-content: center;
       align-items: center;
       background: rgba(0, 0, 0, 0.45);
 }

 .add-Operario-card{
      width: 280px;
      height: 400px;
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(223, 230, 233,1.0);
      border-radius: 8px;
      color: rgba(0, 0, 0,1.0);
      box-shadow: 0 4px 8px rgba(0,0,0,0.45);

   }

 .add-Operario-card label {
     margin-bottom: 5px;
     margin-top: 6px;
 }
 .button-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
 }

 #db-spinner {
           position: absolute;
           top: 55px;
           left: 250px;
           padding: 12px;
           width: 1110px;
           height: 570px;
           display: flex;
           justify-content: center;
           align-items: center;
 }

</style>
@code {

    Boolean state = false;
    Boolean update = false;
    int id;
    Boolean OperariosState = false;

    public static List<Operario> Operarios = new List<Operario>();

    protected override async Task OnInitializedAsync()
    {
        var resultado = await Http.GetFromJsonAsync<List<Operario>>("api/operario");
        if (resultado != null)
            Operarios = resultado;
        OperariosState = true;
    }

    [Parameter]

    public int? Id { get; set; }

    Operario Operario = new Operario();


    async Task EviarOperario()
    {
        try
        {
            await OperarioService.CreateOperario(Operario);
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Guardado correctamente",
                    Icon = SweetAlertIcon.Success,
                });
        }
        catch (InvalidCastException e)
        {
            Console.WriteLine(e);

            state = false;
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/Operariolist");
        }
        finally
        {
            state = false;
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/Operariolist");
        }
    }

    async Task DeleteOperario(int _id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar",
                Text = "¿ Estas seguro que deseas eliminar ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if(!confirmado)
        {
            //context.PreventNavigation();
        }else
        {           
          await OperarioService.DeleteOperario(_id);
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/Operariolist");
        }

    }

    async Task UpdateOperario(Operario Operario)
    {
        await OperarioService.UpdateOperario(Operario);
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Actualizado correctamente",
                Icon = SweetAlertIcon.Success,
            });

        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/Operariolist");
    }

    void updatedatarow(int _id)
    {
        update = true;
        id = _id;
    }

    void Cancelar()
    {
        state = false;
        update = false;
    }

    void NevegarVariablesLista()
    {
        //NanigationManager.NavigateTo("/crearOperario");
        state = true;
    }
    void MostrarUnOperario(int id)
    {
        NavigationManager.NavigateTo($"singleOperario/{id}");
    }
}

