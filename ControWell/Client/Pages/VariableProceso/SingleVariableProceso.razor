@page "/singlevariableproceso"
@page "/singlevariableproceso/{id:int}"
@using ControWell.Client.Services.VariableProcesoService;
@inject IVariableProcesoService VariableProcesoService
@inject HttpClient Http
@inject NavigationManager NanigationManager

<h3>CrearVariableProceso</h3>

<EditForm Model="variable" OnSubmit="EnviarVariable">
    <div>
        <label for="nombre">Nombre variable</label>
        <InputText id="nombre" @bind-Value="variable.Nombre" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Unidad de medida</label>
        <InputText id="lastname" @bind-Value="variable.Unidad" class="form-control"></InputText>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="UpdateVariableProceso">Actualizar</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteVariableProceso">Eliminar</button>
    <button class="btn btn-outline-warning" @onclick="VolverAnterior">Volver</button>
</EditForm>


@code {
    [Parameter]

    public int? Id { get; set; }

    VariableProceso variable = new VariableProceso();


    async Task EnviarVariable()
    {
        await VariableProcesoService.UpdateVariableProceso(variable);

    }

    void VolverAnterior()
    {
        NanigationManager.NavigateTo("/variableprocesolist");
    }
    

    protected override async Task OnParametersSetAsync()
    {
       
        variable = await VariableProcesoService.GetSingleVariableProceso((int)Id);
    }

    async Task DeleteVariableProceso()
    {
        await VariableProcesoService.DeleteVariableProceso(variable.Id);
    }

    async Task UpdateVariableProceso()
    {
        await VariableProcesoService.UpdateVariableProceso(variable);
    }

 
}