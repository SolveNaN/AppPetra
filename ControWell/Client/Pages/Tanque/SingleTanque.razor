@page "/singletanque"
@page "/singletanque/{id:int}"
@using ControWell.Client.Services.TanqueService;
@inject ITanqueService TanqueService
@inject HttpClient Http
@inject NavigationManager NanigationManager

<h3>CrearTanque</h3>

<EditForm Model="tanque" OnSubmit="EnviarTanque">
    <div>
        <label for="nombre">Nombre tanque</label>
        <InputText id="nombre" @bind-Value="tanque.NombreTanque" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Capacidad Bls</label>
        <InputText id="lastname" @bind-Value="tanque.Capacidad" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Tipo de fluido</label>
        <InputText id="lastname" @bind-Value="tanque.TipoFluido" class="form-control"></InputText>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="UpdateTanque">Actualizar</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteTanque">Eliminar</button>
    <button class="btn btn-outline-warning" @onclick="VolverAnterior">Volver</button>
</EditForm>


@code {
    [Parameter]

    public int? Id { get; set; }

    Tanque tanque = new Tanque();


    async Task EnviarTanque()
    {
        await TanqueService.UpdateTanque(tanque);

    }

    void VolverAnterior()
    {
        NanigationManager.NavigateTo("/tanquelist");
    }


    protected override async Task OnParametersSetAsync()
    {

        tanque = await TanqueService.GetSingleTanque((int)Id);
    }

    async Task DeleteTanque()
    {
        await TanqueService.DeleteTanque(tanque.Id);
    }

    async Task UpdateTanque()
    {
        await TanqueService.UpdateTanque(tanque);
    }


}