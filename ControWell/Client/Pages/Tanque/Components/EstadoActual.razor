@inject HttpClient Http
@inject NavigationManager NavigationManager
@using ControWell.Client.Services.AlarmaService;
@using ControWell.Client.Services.RegistroService;
@using ControWell.Client.Services.PozoService;
@using ControWell.Client.Services.VariableProcesoService;
@inject IRegistroService RegistroService
@using ControWell.Shared
@using System.Net.Http.Json
@inject SweetAlertService Swal
<div>
    <div class="container col-12">
        <div class="table-container-scroll">
            <table class="table">
                <thead>
                    <tr>
                        <th>Pozo</th>
                        <th>Tanque</th>
                        <th>Ultimo Movimiento</th>
                        <th>Nivel</th>
                        <th>Interfase</th>
                        <th>SyW</th>
                        <th>nsv</th>
                        <th>agua</th>
                        <th>fluido</th>
                        <th>fecha</th>
                        <th>hora</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Registro in Registros)
                    {
                        <tr>
                            <td>CH-2045-B</td>
                            <td>TK-B12000</td>
                            <td>Ingreso</td>
                            <td>1500</td>
                            <td>100</td>
                            <td>

                                0.45
                            </td>
                            <td>
                                650
                            </td>
                            <td>
                                230
                            </td>
                            <td>
                                crudo
                            </td>
                            <td>
                                30 de Marzo 2023
                            </td>
                            <td>
                                23:00
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="()=>MostrarUnRegistro(Registro.Id)"><i class="oi oi-pencil"></i></button>
                                <button class="btn btn-warning" data-toggle="tooltip" title="Delete" @onclick="()=>DeleteRegistro(Registro.Id)"><i class="oi oi-trash"></i></button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<style>
    body {
        font-family: Arial;
    }

    InputSelect {
        border-radius: 5px;
        margin-top: 5px;
    }

    input {
        border-radius: 5px;
        background-color: #f7fafc;
        width: 90%;
        height: 40px;
        border: 0.5px dashed blue;
    }

    button {
        margin-left: 5px;
    }

    /* estilos de la tabla */

    .table-container-scroll {
        overflow: scroll;
        height: 500px;
        width: 100%;
    }

    table {
        background-color: white;
        text-align: left;
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 10px;
        margin-left: 40px;
    }

    thead {
        background-color: #388e3c;
        border-bottom: solid 3px #0F362D;
        color: #eeeeee;
        position: sticky;
        top: 0px;
    }

    tr:nth-child(even) {
        background-color: #ddd;
    }

    tr:hover td {
        background-color: rgba(100, 176, 161, 0.8);
        /*background-color: #369681;*/
        color: #eeeeee;
    }

    #db-spinner {
        position: absolute;
        top: 55px;
        left: 250px;
        padding: 12px;
        width: 1110px;
        height: 570px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .alarma-activa {
        color: red;
        font-weight: bold;
    }

    /*TAMAÑO CELDA*/
    max {
        width: 10%;
    }

    .fa-bell {
        margin-left: 15px;
        color: rgb(0, 0, 0);
        /*      background-color: papayawhip;
                 border-radius: 0.2em;
                 padding: 0.3em;*/
    }

    .set-alarm {
        background-color: transparent;
        margin: 15px;
    }

    .button-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-left: 5px;
    }

    .button-group-add {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: 5px;
    }

    /*    crear alama*/
    .create-container {
        position: absolute;
        top: 55px;
        left: 250px;
        padding: 12px;
        width: 1110px;
        height: 570px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.45);
    }

    .add-card {
        width: 340px;
        height: 440px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(223, 230, 233,1.0);
        border-radius: 8px;
        color: rgba(0, 0, 0,1.0);
        box-shadow: 0 4px 8px rgba(0,0,0,0.45);
    }

        .add-card label {
            margin-bottom: 5px;
            margin-top: 6px;
        }

    .button-group {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .button-group-add {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }


    #db-spinner {
        position: absolute;
        top: 55px;
        left: 250px;
        padding: 12px;
        width: 1110px;
        height: 570px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
@code {

    [Parameter]

    public int? Id { get; set; }

    Boolean state = false;
    Boolean update = false;
    int id;
    Boolean registroState = false;
    Boolean setAlarma = false;
    Boolean AlarmaRegistro = false;

    Registro registro = new Registro();
    VariableProceso variable = new VariableProceso();

    Pozo pozo = new Pozo();

    public static List<VariableProceso> Variables = new List<VariableProceso>();
    public static List<Pozo> Pozos = new List<Pozo>();
    public static List<Registro> Registros = new List<Registro>();

    /*Esta es la lista para traaer valores de alarmas aqui*/

    public static List<Alarma> Alarmas = new List<Alarma>();

    protected override async Task OnInitializedAsync()
    {
        var mivariable = await Http.GetFromJsonAsync<List<VariableProceso>>("api/VariableProceso");
        if (mivariable != null)
            Variables = mivariable;
        registroState = true;

        var resultadoRegistro = await Http.GetFromJsonAsync<List<Registro>>("api/Registro");
        if (resultadoRegistro != null)
            Registros = resultadoRegistro;
        AlarmaRegistro = true;

        var mipozo = await Http.GetFromJsonAsync<List<Pozo>>("api/Pozo");
        if (mipozo != null)
            Pozos = mipozo;

        /*Traer los valores de alarma aqui*/
        var resultadoAlarma = await Http.GetFromJsonAsync<List<Alarma>>("api/Alarma");
        if (resultadoAlarma != null)
            Alarmas = resultadoAlarma;

    }

    protected override async Task OnParametersSetAsync()
    {
        //registro = await RegistroService.GetSingleRegistro((int)Id);
    }

    async Task EnviarRegistro()
    {
        await RegistroService.CreateRegistro(registro);
        Console.WriteLine("REGISTRO");

        Console.WriteLine(registro.FechaHora);

        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Guardado correctamente",
                Icon = SweetAlertIcon.Success,
            });
        state = true;
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/registroList");

    }

    async Task DeleteRegistro(int _id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar",
                Text = "¿ Estas seguro que deseas eliminar ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            await RegistroService.DeleteRegistro(_id);
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/registroList");
        }
    }

    async Task UpdateRegistro()
    {
        await RegistroService.UpdateRegistro(registro);
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Actualizado correctamente",
                Icon = SweetAlertIcon.Success,
            });
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/registroList");
    }

    void NevegarRegistroLista()
    {
        //NavigationManager.NavigateTo("/crearregistro");
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/registroList");
    }
    void MostrarUnRegistro(int id)
    {
        //NanigationManager.NavigateTo($"singleregistro/{id}");
        update = true;
    }

    void Cancelar()
    {
        state = false;
        update = false;
    }

    void nuevoRegistro()
    {
        state = true;
    }

    //Navegacion hacia la carga por excel

    public void CargarXSXL()
    {
        NavigationManager.NavigateTo("/uploaddata");
    }

    //Consulta para que por pozo solo me traiga las variables disponibles para ese pozo

}

