@using ControWell.Client.Services.RegistroService;
@using ControWell.Client.Services.PozoService;
@using ControWell.Client.Services.VariableProcesoService;
@inject HttpClient Http
@inject NavigationManager NanigationManager
@inject IRegistroService RegistroService
@using ControWell.Shared
@using System.Net.Http.Json
<EditForm Model="registro" OnSubmit="EnviarRegistro">
    <label>Fluido</label>
    <InputSelect @bind-Value="registro.PozoId" class="form-select">
        @foreach (var i in TipoMovimientos)
        {
            <option value="@i.Id">@i.NombreMovimiento</option>
        }

    </InputSelect>
    

    <button type="button" class="btn btn-primary" @onclick="UpdateRegistro">Actualizar</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteRegistro">Eliminar</button>
    <button class="btn btn-outline-warning" @onclick="VolverAnterior">Volver</button>
    <br />
    <br />
</EditForm>
@code {
    [Parameter]

    public int? Id { get; set; }

    Registro registro = new Registro();

    Pozo pozo = new Pozo();

    VariableProceso variable = new VariableProceso();


    public static List<VariableProceso> Variables = new List<VariableProceso>();

    public static List<Pozo> Pozos = new List<Pozo>();
    public static List<TipoMovimiento> TipoMovimientos = new List<TipoMovimiento>();


    protected override async Task OnInitializedAsync()
    {
        var resultado = await Http.GetFromJsonAsync<List<VariableProceso>>("api/VariableProceso");
        if (resultado != null)
            Variables = resultado;


        var resultad = await Http.GetFromJsonAsync<List<Pozo>>("api/Pozo");
        if (resultad != null)
            Pozos = resultad;

        var res = await Http.GetFromJsonAsync<List<TipoMovimiento>>("api/TipoMovimiento");
        if (res != null)
            TipoMovimientos = res;
    }


    async Task EnviarRegistro()
    {
        await RegistroService.UpdateRegistro(registro);

    }

    void VolverAnterior()
    {
        NanigationManager.NavigateTo("/registrolist");
    }


    protected override async Task OnParametersSetAsync()
    {

        registro = await RegistroService.GetSingleRegistro((int)Id);
    }

    async Task DeleteRegistro()
    {
        await RegistroService.DeleteRegistro(registro.Id);
    }

    async Task UpdateRegistro()
    {
        await RegistroService.UpdateRegistro(registro);
    }


}