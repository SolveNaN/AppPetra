@page "/aforotk"
@page "/aforotk/{id:int}"
@using ControWell.Client.Services.TanqueService;
@inject ITanqueService TanqueService
@inject HttpClient Http
@inject NavigationManager NanigationManager

<h3>CrearTanque</h3>

<EditForm Model="tanque">
    <div>
        <label for="nombre">Nombre tanque</label>
        <InputText id="nombre" @bind-Value="tanque.NombreTanque" class="form-control"></InputText>
    </div>
    <div>
        
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nivel</th>
                            <th>Volumen bls</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                     @foreach(var af in aforos)
                         {
                          if (af.TanqueId == tanque.Id)
                    {
                        <tr>
                            <td>@af.Nivel</td>
                            <td>@af.Volunen</td>
                            <td>
                                <button class="btn btn-primary" @onclick="()=>EditarNivel(af.Id)"><i class=" oi oi-pencil"></i></button>
                            </td>
                        </tr>
                            
                    }
                        }
                    </tbody>
                </table>
            
        
    </div>

    <br />

    <button type="button" class="btn btn-primary" >Actualizar Aforo</button>
    <button type="button" class="btn btn-danger" >Eliminar Aforo</button>
    <button class="btn btn-outline-warning" @onclick="VolverAnterior">Volver</button>
</EditForm>


@code {
    [Parameter]

    public int? Id { get; set; }

    Tanque tanque = new Tanque();


    async Task EnviarTanque()
    {
        await TanqueService.UpdateTanque(tanque);

    }

    void VolverAnterior()
    {
        NanigationManager.NavigateTo("/tanquelist");
    }


    protected override async Task OnParametersSetAsync()
    {

        tanque = await TanqueService.GetSingleTanque((int)Id);
    }

    //Para traer todos los aforos
    public static List<AforoTK> aforos = new List<AforoTK>();

    protected override async Task OnInitializedAsync()
    {
        var resultado = await Http.GetFromJsonAsync<List<AforoTK>>("api/Aforo");
        if (resultado != null)
            aforos = resultado;
    }

    //Funcion para navegar hasta la carga por excel a UploadAforo

    public void CargarAforos()
    {
        NanigationManager.NavigateTo("/uploadaforo");
    }

    public void EditarNivel(int id)
    {
        NanigationManager.NavigateTo($"/editarnivel/{id}");
    }

}