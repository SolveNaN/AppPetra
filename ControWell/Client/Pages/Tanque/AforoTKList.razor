@page "/aforotk"
@page "/aforotk/{id:int}"
@inject ITanqueService TanqueService
@inject IAforoService AforoService
@using ControWell.Shared
@using System.Net.Http.Json
@using ControWell.Client.Services.TanqueService;
@using ControWell.Client.Services.AforoService;
@using System.Data
@using System.IO
@using NPOI.XSSF.UserModel
@using NPOI.SS.UserModel
@inject SweetAlertService Swal


@inject HttpClient Http
@inject NavigationManager NavigationManager

<br />
<br />

<EditForm Model="tanque">
    <div>
        <label for="nombre">Nombre tanque</label>
        <InputText @bind-Value="tanque.NombreTanque" class="form-control" disabled ></InputText>
    </div>
     <div class="button-group">
       @if(excelUpload==false){<button type="button" class="btn btn-primary" @onclick=Procesar disabled >Actualizar Aforo</button>}
       else{<button type="button" class="btn btn-primary" @onclick=Procesar>Actualizar Aforo</button>}
       <button type="button" class="btn btn-danger" @onclick=EliminarAforo>Eliminar Aforos</button>
       <button type="button" class="btn btn-info" @onclick="()=>AgregarNivel(tanque.Id)">Agregar Nivel</button>
       @if(ViewXLXS == false){<button class="btn btn-warning" @onclick="ver">Ver XLXS</button>} else {<button class="btn btn-warning" @onclick="ver">Ver Tabla</button>}
       <button class="btn btn-warning" @onclick="VolverAnterior">Volver</button> 
     </div>
     <div class="input-file">
         <div class="input-file-container">
            <InputFile OnChange="@ImportExcelFile" class="InputFile" accept=".xlsx" />
         </div>
     </div>


    <div class="table-container-scroll">
        @if(ViewXLXS == false)
        {
         <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Nivel</th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th>Volumen bls</th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                     @foreach(var af in aforos)
                         {
                          if (af.TanqueId == tanque.Id)
                        {
                            <tr>
                            <td></td>
                            @if (update == true && af.Id == id) {<td><input @bind-value="@af.Nivel"/></td> }else{<td>@af.Nivel</td>}
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            @if (update == true && af.Id == id) {<td><input @bind-value="@af.Volunen"/></td> }else{<td>@af.Volunen</td>}
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                                    @if (update == true && af.Id == id)
                                    {
                                    <td>
                                        <button class="btn btn-info" @onclick="()=>EditarNivel(af)">
                                            <i class="fa-solid fa-circle-check"></i>
                                        </button>
                                        <button class="btn btn-danger" @onclick="Cancelar"><i class="fa-solid fa-ban"></i></button>
                                    </td>
                                    <td></td>
                                    }
                                    else
                                    {
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>updatedatarow(af.Id)"><i class="oi oi-pencil"></i></button>
                                        <button class="btn btn-warning" @onclick="()=>EliminarAforoDataTable(af.Id)"><i class="oi oi-trash"></i></button>
                                    </td>
                                    }
                        </tr>
                            
                        }
                        }
                    </tbody>
            </table>
        }
        else if (excelUpload == true && ViewXLXS == true)
        {
          <table class="table">
        <thead>
            <tr>                
            @foreach (DataColumn col in dt.Columns)
            {
                            <th>@col.ColumnName</th>
            }                           
            </tr>
        </thead>
        <tbody>
        @foreach (DataRow row in dt.Rows)
        {             

                   <tr>
                @foreach (DataColumn col in dt.Columns)
                {

                         <td>@row[col.ColumnName]</td>               

                }
                  </tr>


        }
        </tbody>
            </table>
        }else
        {
            <h1>No se ha cargado ningun archivo </h1>
            <p><i class="fa-light fa-triangle-exclamation"></i></p>
        }
    </div>

</EditForm>

@*Agregar aforo*@

@if (stateAddAforo == true)
{
    <div class="create-container">
        <div class="add-card">
            <EditForm Model="aforo" OnSubmit="()=>EnviarAforo(tanque.Id)">
                <div>
                    <label for="nombre">Tanque</label>
                    <InputText id="nombre" @bind-Value="tanque.NombreTanque" class="form-control"></InputText>
                </div>
                <div>
                    <label for="nombre">Nivel</label>
                    <InputNumber id="nombre" @bind-Value="aforo.Nivel" class="form-control"></InputNumber>
                </div>
                <div>
                    <label for="lastname">Volumen Bls</label>
                    <InputNumber id="lastname" @bind-Value="aforo.Volunen" class="form-control"></InputNumber>
                </div>


                <br />

                <button type="submit" class="btn btn-primary">Confirmar</button>
                <button class="btn btn-warning" @onclick="Cancelar">Cancelar</button>

            </EditForm>
        </div>
    </div>
}

@*Loading database*@
@if (TankState == false)
{
    <div id="db-spinner">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

    <style>
        body {
            font-family: Arial;
        }

        button {
            margin: 4px;
        }

        input {
            border-radius: 5px;
            background-color: #f7fafc;
            width: 90%;
            height: 40px;
            border: 0.5px dashed blue;
        }
        /* estilos de la tabla */

        .table-container-scroll {
            overflow: scroll;
            height: 350px;
            width: 100%;
        }

        table {
            background-color: white;
            text-align: left;
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            padding: 10px;
            margin-left: 40px;
        }

        thead {
            background-color: #388e3c;
            border-bottom: solid 3px #0F362D;
            color: #eeeeee;
            position: sticky;
            top: 0;
        }

        tr:nth-child(even) {
            background-color: #ddd;
        }

        tr:hover td {
            background-color: rgba(100, 176, 161, 0.8);
            /*background-color: #369681;*/
            color: #eeeeee;
        }

       .button-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom:10px;
        margin-top: 10px;
    }

    .input-file {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 10px;
            margin-top: 10px;
            width: 100%;
    }

     .input-file-container {
         width: 70%;
     }

    .InputFile {
        height: 50%;
        background-color: cadetblue;
        color: white;
        width: 100%;
        margin-bottom: 5px;
    }

    #db-spinner {
        position: absolute;
        top: 55px;
        left: 250px;
        padding: 12px;
        width: 1110px;
        height: 570px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .create-container {
        position: absolute;
        top: 55px;
        left: 250px;
        padding: 12px;
        width: 1110px;
        height: 570px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.45);
    }

    .add-card {
        width: 280px;
        height: 300px;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(223, 230, 233,1.0);
        border-radius: 8px;
        color: rgba(0, 0, 0,1.0);
        box-shadow: 0 4px 8px rgba(0,0,0,0.45);
    }

        .add-card label {
            margin-bottom: 5px;
            margin-top: 6px;
        }
    </style>
@code {
    [Parameter]

    public int? Id { get; set; }

    Boolean ViewXLXS = false;
    Boolean TankState = false;
    Boolean state = false;
    Boolean update = false;
    Boolean excelUpload = false;
    Boolean stateAddAforo = false;

    int id;

    Tanque tanque = new Tanque();

    AforoTK aforo = new AforoTK();


    void VolverAnterior()
    {
        NavigationManager.NavigateTo("/tanquelist");
    }


    protected override async Task OnParametersSetAsync()
    {
        tanque = await TanqueService.GetSingleTanque((int)Id);


    }


    //Para traer todos los aforos
    public static List<AforoTK> aforos = new List<AforoTK>();  

    protected override async Task OnInitializedAsync()
    {
        var resultado = await Http.GetFromJsonAsync<List<AforoTK>>("api/Aforo");
        if (resultado != null)
        {
            aforos = resultado;
            TankState = true;   
        }else
        {
            TankState = false;
        }
    }

    //Funcion para navegar hasta la carga por excel a UploadAforo

    public void CargarAforos()
    {
        NavigationManager.NavigateTo("/uploadaforo");
    }

    public async void EditarNivel(AforoTK Aforo)
    {
        await AforoService.UpdateAforo(Aforo);
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Guardado correctamente",
                Icon = SweetAlertIcon.Success,
            });
        state = false;
        update = false;
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo($"/aforotk/{tanque.Id}");

        //NavigationManager.NavigateTo($"/editarnivel/{Id}");        
    }

    public void AgregarNivel(int Id)
    {
        stateAddAforo = true;
        //NavigationManager.NavigateTo($"/aforotk/{Id}");
    }
    //FUNCIONES PARA EXCEL
    //funcion para administrar las celdas y visualizacion de excel
    DataTable dt = new DataTable();

    async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        excelUpload = true;
        ViewXLXS = true;

        var fileStream = e.File.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        fileStream.Close();
        ms.Position = 0;

        ISheet sheet;
        var xsswb = new XSSFWorkbook(ms);

        sheet = xsswb.GetSheetAt(0);
        IRow hr = sheet.GetRow(0);
        var rl = new List<string>();

        int cc = hr.LastCellNum;
        for (var j = 0; j < cc; j++)
        {
            ICell cell = hr.GetCell(j);
            dt.Columns.Add(cell.ToString());
        }

        for (var j = (sheet.FirstRowNum + 1); j <= sheet.LastRowNum; j++)
        {
            var r = sheet.GetRow(j);
            for (var i = r.FirstCellNum; i < cc; i++)
            {
                rl.Add(r.GetCell(i).ToString());
            }
            if (rl.Count > 0)
            {
                dt.Rows.Add(rl.ToArray());
            }
            rl.Clear();
        }
    }
    //fin de la funcion para administrar datos de excel

    async Task EliminarAforoDataTable(int _id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar",
                Text = "¿ Estas seguro que deseas eliminar ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (!confirmado)
        {
            //context.PreventNavigation();
        }
        else
        {
            await AforoService.DeleteAforo(_id);
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo($"/aforotk/{tanque.Id}");
        }
        //NanigationManager.NavigateTo($"/aforotk/{id}");
    }



    //Inicio de la funcion para tomar los datos del excel

    async Task Procesar()
    {    
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Procesar",
                Text = "¿ Deseas guardar esta información ?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (!confirmado)
        {
            //context.PreventNavigation();
        }
        else
        {
            //registros de aforo con linq para el tanque actual
            var misaforos = from af in aforos
                            where af.TanqueId == tanque.Id
                            orderby af.Nivel ascending
                            select af;
            //trato de ordenar row
            foreach (DataRow row in dt.Rows)
            {
                AforoTK aforo = new AforoTK();
                AforoTK NuevoAforo = new AforoTK();//se inicializa el objeto nuevo
                aforo.Id = default;
                aforo.Nivel = 50000;
                aforo.Volunen = 50000;
                aforo.TanqueId = 50000;
                NuevoAforo.Nivel = default;//define una referencia para saber que si está o no y actualiza el nivel
                foreach (DataColumn col in dt.Columns)
                {
                    var celda = row[col.ColumnName];
                    var columna = col.ColumnName;
                    columna = columna.ToString();
                    var ExisteNivel = false;//variable bandera
                    if (columna == "Nivel")
                    {
                        foreach(var i in misaforos)
                        {
                            if (i.Nivel == Convert.ToInt32(celda.ToString()))//el objeto aforo se llena constantemente
                            {
                                aforo.Id=i.Id;
                                aforo.Nivel=i.Nivel;
                                aforo.TanqueId = tanque.Id;                            
                                ExisteNivel = true;
                            }

                        }
                        if (ExisteNivel == false)
                        {
                            NuevoAforo.Nivel = Convert.ToInt32(celda.ToString());
                            NuevoAforo.TanqueId = tanque.Id;
                            AforoService.CreateAforo(aforo);
                            //await Task.Delay(150);
                        }

                    }

                    if (columna == "Volumen")
                    {
                        if (aforo.Id != default)
                        {
                            aforo.Volunen = Convert.ToDecimal(celda);
                            AforoService.UpdateAforo(aforo);
                        }
                        if (NuevoAforo.Nivel != default||NuevoAforo.Nivel==0)
                        {                        
                            NuevoAforo.Volunen = Convert.ToDecimal(celda);
                            AforoService.CreateAforo(NuevoAforo);
                            //await Task.Delay(150);
                        }

                    }


                }


            }       

            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/tanquelist");
        }                      
    }
    //Fin de funcion para tomar datos de excel

    //Funcion para enviar los datos a la base

    //Fin de funcion para enviar los datos a la base

    async Task EnviarAforo(int id)
    {
        aforo.TanqueId = tanque.Id;
        await AforoService.CreateAforo(aforo);
        NavigationManager.NavigateTo($"/");
        NavigationManager.NavigateTo($"/aforotk/{tanque.Id}");
        stateAddAforo = false;

    }

    //Eliominar Aforos con linq
    public async void EliminarAforo()
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿ Deseas eliminar esta información ?",
                Text = "Los datos se borrarán permanentemente",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, Eliminar",
                CancelButtonText = "Conservar"
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (!confirmado)
        {
            //context.PreventNavigation();
        }
        else
        {
            var misaforos = from af in aforos
                            where af.TanqueId == tanque.Id
                            select af;
            foreach (var i in misaforos)
            {
                await AforoService.DeleteAforo(i.Id);
            }
            NavigationManager.NavigateTo("/tanquelist");
        }
    }


    //fucion para ver el excel
    public void ver()
    {
        ViewXLXS = !ViewXLXS;
    }

    //Consulta por nivel
    AforoTK miconsulta = new AforoTK();
    async Task ConsultaNivel(float nivel)
    {
        await AforoService.ConsultaNivel(nivel);

    }

    void updatedatarow(int _id)
    {
        update = true;
        id = _id;
    }

    void Cancelar()
    {
        state = false;
        update = false;
        stateAddAforo = false;
    }

    void AgregarNivel()
    {
        state = true;
        update = false;
    }

}