@page "/editarnivel"
@page "/editarnivel/{id:int}";
@using ControWell.Shared
@using System.Net.Http.Json
@using ControWell.Client.Services.AforoService;
@inject IAforoService AforoService
@inject HttpClient Http
@inject NavigationManager NanigationManager

<h3>CrearTanque</h3>

<EditForm Model="Aforo">
    <div>
        <label for="nivel">Nivel</label>
        <InputNumber id="nombre" @bind-Value="Aforo.Nivel" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="nivel">Volumen</label>
        <InputNumber id="nombre" @bind-Value="Aforo.Volunen" class="form-control"></InputNumber>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="()=>ActualizarAforo(Aforo.TanqueId)">Actualizar</button>
    <button type="button" class="btn btn-danger" @onclick="()=>EliminarAforo(Aforo.TanqueId)">Eliminar</button>
    <button class="btn btn-outline-warning" @onclick="()=>Volver(Aforo.TanqueId)">Volver</button>
</EditForm>


@code {
    [Parameter]

    public int? Id { get; set; }

    AforoTK Aforo = new AforoTK();


    async Task EnviarAforo()
    {
        await AforoService.UpdateAforo(Aforo);

    }

    void Volver(int id)
    {
        NanigationManager.NavigateTo($"/aforotk/{id}");
    }


    protected override async Task OnParametersSetAsync()
    {

        Aforo = await AforoService.GetSingleAforo((int)Id);
    }

    async Task EliminarAforo(int id)
    {
        await AforoService.DeleteAforo(Aforo.Id);
        NanigationManager.NavigateTo($"/aforotk/{id}");
    }

    async Task ActualizarAforo(int id)
    {
        await AforoService.UpdateAforo(Aforo);
        NanigationManager.NavigateTo($"/aforotk/{id}");
    }


}