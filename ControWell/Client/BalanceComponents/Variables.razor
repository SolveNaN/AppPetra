@using ControWell.Client.Services.BalanceService;
@using ControWell.Shared
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBalanceService BalanceService
@inject SweetAlertService Swal
<div>
    <div class="card-variables">
        <EditForm Model="miBalance" OnSubmit="EviarBalance">
            <br />
            <div class="row-align-title">
                <h5>Variables</h5>
            </div>
            <br />
            <div>

@*                <div>
                    <label for="nombre">Nivel</label>
                    <InputNumber @bind-Value=miBalance.Nivel></InputNumber>
                </div>*@
              <div class="colum-row-variable">
                <div class="row-align">
                    <p>⠀⠀TOV:⠀</p>
                      <input type="text" @value=miBalance.Interfase readonly/>
                    <p>⠀Bbls</p>
                </div>
                <div class="row-align">
                    <p>⠀⠀FW:⠀⠀⠀</p>
                      <input type="text" @value=miBalance.Interfase readonly/>
                    <p>⠀Bbls</p>
                </div>
              </div>

              <div class="colum-row-variable">
                <div class="row-align">
                    <p>⠀⠀GOV:⠀</p>
                      <input type="text" @value=miBalance.Interfase readonly/>
                    <p>⠀Bbls</p>
                </div>
                <div class="row-align">
                    <p>⠀⠀NSV:⠀⠀</p>
                      <input type="text" @value=miBalance.Interfase readonly/>
                    <p>⠀Bbls</p>
                </div>
              </div>

              <div class="colum-row-variable">
                    <div class="row-align">
                        <p>⠀⠀GSV:⠀</p>
                        <input type="text" @value=miBalance.Interfase readonly />
                        <p>⠀Bbls</p>
                    </div>
                    <div class="row-align">
                        <p>⠀⠀AGUA:⠀</p>
                        <input type="text" @value=miBalance.Interfase readonly />
                        <p>⠀Bbls </p>
                    </div>
                </div>
                
                <div class="colum-row-variable">
                    <div class="row-align">
                        <p>⠀⠀CTSh:⠀</p>
                        <input type="text" @value=miBalance.Interfase readonly />
                    </div>
                    <div class="row-align">
                        <p>⠀⠀CTL:⠀</p>
                        <input type="text" @value=miBalance.Interfase readonly />
                    </div>
                    <div class="row-align">
                        <p>⠀⠀CSW:⠀</p>
                        <input type="text" @value=miBalance.Interfase readonly />
                    </div>
                    
                </div>


@*                <div>
                    <label for="nombre">°API</label>
                    <InputNumber @bind-Value=miBalance.Api></InputNumber>
                </div>
                <div>
                    <label for="nombre">SYW %</label>
                    <InputNumber @bind-Value=miBalance.Syw></InputNumber>
                </div>
                <div>
                    <label for="nombre">Tem ambiente °F</label>
                    <InputNumber @bind-Value=miBalance.TemAmbiente></InputNumber>
                </div>
                <div>
                    <label for="nombre">Tem fluido °F</label>
                    <InputNumber @bind-Value=miBalance.TemFluido></InputNumber>
                </div>*@
            </div>
        </EditForm>

        
    </div>
</div>

<style>

 body{
   font-family: Arial;
   font-size: 12px;
  }
  .colum-row-variable{
      display: flex;
      width: 100%;
  }

    .row-align {
        display: flex;
    }

    .row-align-title {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
    }
 .card-variables{
      width: 700px;
      height: 350px;
      display: block;
      justify-content: center;
      align-items: center;
      background: rgba(223, 230, 233,1.0);
      border-radius: 8px;
      color: rgba(0, 0, 0,1.0);
      box-shadow: 0 4px 8px rgba(0,0,0,0.45);

   }
a
 .card-variables label {
     margin-bottom: 5px;
     margin-top: 6px;
     width: 100px;
 }

 .card-variables input {
    border-radius: 4px;
    background-color: #f7fafc;
    width: 50%;
    height: 20px;
    border: 0.5px solid black;
    border-width: 1px;
 }


</style>
@code {
    Boolean state = false;
    Boolean update = false;
    int id;
    Boolean PozosState = false;
    [Parameter]

    public int? Id { get; set; }

    Balance miBalance = new Balance();
    public static List<Tanque> Tanques = new List<Tanque>();
    public static List<Pozo> Pozos = new List<Pozo>();
    public static List<TipoMovimiento> Movimientos = new List<TipoMovimiento>();

    protected override async Task OnInitializedAsync()
    {
        var mitanque = await Http.GetFromJsonAsync<List<Tanque>>("api/Tanque");
        if (mitanque != null)
            Tanques = mitanque;
        var mipozo = await Http.GetFromJsonAsync<List<Pozo>>("api/Pozo");
        if (mipozo != null)
            Pozos = mipozo;
        var mimovimiento = await Http.GetFromJsonAsync<List<TipoMovimiento>>("api/TipoMovimiento");
        if (mimovimiento != null)
            Movimientos = mimovimiento;
        PozosState = true;
    }

    async Task EviarBalance()
    {
        try
        {
            await BalanceService.CreateBalance(miBalance);
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Guardado correctamente",
                    Icon = SweetAlertIcon.Success,
                });
        }
        catch (InvalidCastException e)
        {
            Console.WriteLine(e);

            state = false;
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/movimientos");
        }
        finally
        {
            state = false;
            NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/movimientos");
        }
    }
}